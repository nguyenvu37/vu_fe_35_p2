{"version":3,"sources":["common/callApi.js","config/config.js","common/calculation.js","pages/admin/component/chart/lineChart.js"],"names":["callApi","endPoint","method","data","axios","url","config","catch","error","alert","console","log","host","getSummary","arr","map","item","parseInt","quantity","Math","floor","price","discount","reduce","a","b","getTotal","getPrice","getQuantity","getKeywordText","str","toUpperCase","split","filter","x","join","getKeywordId","formCurencyVN","toLocaleString","style","currency","LineChart","t","useTranslation","useState","products","setProducts","getRevenueFlMonth","month","year","length","monthAfterHander","yearAfterHander","timeStartMonth","Date","getTime","timeEndMonth","sumFlMonth","time","ac","cur","total","dataChart","labels","datasets","label","borderColor","backgroundColor","pointBackgroundColor","pointBorderColor","options","legend","display","cornerRadius","scales","area","ticks","callback","e","yAxes","useEffect","then","res","status","product","forEach","ele","push","fetchProducts"],"mappings":"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","file":"static/js/92.1842d3fd.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport * as config from \"../config/config\";\r\n\r\nexport default function callApi(endPoint, method = \"get\", data) {\r\n  return axios({\r\n    method: method,\r\n    url: `${config.host}/${endPoint}`,\r\n    data: data,\r\n  }).catch((error) => {\r\n    alert(\"Error: ERR_CONNECTION_REFUSED Please: Reload Page\");\r\n    console.log(error.config);\r\n  });\r\n}\r\n","export const host = \"https://data-mandala.herokuapp.com\";\r\n","export const getSummary = (arr) => {\r\n  return arr\r\n    .map(\r\n      (item) =>\r\n        parseInt(item.quantity) *\r\n        Math.floor(item.price * ((100 - item.discount) / 100))\r\n    )\r\n    .reduce((a, b) => a + b, 0);\r\n};\r\n\r\nexport const getTotal = (data, quantity) => {\r\n  return (\r\n    Math.floor(data.price * ((100 - data.discount) / 100)) * parseInt(quantity)\r\n  );\r\n};\r\n\r\nexport const getPrice = (data) => {\r\n  return Math.floor(data.price * ((100 - data.discount) / 100));\r\n};\r\n\r\nexport const getQuantity = (arr) => {\r\n  return arr.map((item) => item.quantity).reduce((a, b) => a + b, 0);\r\n};\r\n\r\nexport const getKeywordText = (str) => {\r\n  return str\r\n    .toUpperCase()\r\n    .split(\" \")\r\n    .filter((x) => x !== \"\")\r\n    .join(\"\");\r\n};\r\n\r\nexport const getKeywordId = (str) => {\r\n  return str\r\n    .toUpperCase()\r\n    .split(\"-\")\r\n    .filter((x) => x !== \"-\")\r\n    .join(\"\");\r\n};\r\n\r\nexport function formCurencyVN(price) {\r\n  return price.toLocaleString(\"it-IT\", {\r\n    style: \"currency\",\r\n    currency: \"VND\",\r\n  });\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport callApi from \"../../../../common/callApi\";\r\nimport { formCurencyVN } from \"../../../../common/calculation\";\r\n\r\nconst LineChart = () => {\r\n  const { t } = useTranslation(\"translation\");\r\n  const [products, setProducts] = useState([]);\r\n  let yearDefault = 2020;\r\n\r\n  const getRevenueFlMonth = (month, year = yearDefault) => {\r\n    if (!products || products.length === 0) return 0;\r\n\r\n    const monthAfterHander = month === 1 ? 12 : month - 1;\r\n    const yearAfterHander = month === 1 ? year - 1 : year;\r\n\r\n    const timeStartMonth = new Date(\r\n      yearAfterHander,\r\n      monthAfterHander\r\n    ).getTime();\r\n\r\n    const timeEndMonth =\r\n      monthAfterHander === 12\r\n        ? new Date(yearAfterHander + 1, 1, 1).getTime()\r\n        : new Date(yearAfterHander, monthAfterHander + 1, 1).getTime();\r\n\r\n    let sumFlMonth = products\r\n      .filter(\r\n        (item) => item.time >= timeStartMonth && item.time <= timeEndMonth\r\n      )\r\n      .reduce((ac, cur) => ac + cur.total, 0);\r\n\r\n    return sumFlMonth;\r\n  };\r\n\r\n  const dataChart = {\r\n    labels: [\r\n      t(\"admin.m1\"),\r\n      t(\"admin.m2\"),\r\n      t(\"admin.m3\"),\r\n      t(\"admin.m4\"),\r\n      t(\"admin.m5\"),\r\n      t(\"admin.m6\"),\r\n      t(\"admin.m7\"),\r\n      t(\"admin.m8\"),\r\n      t(\"admin.m9\"),\r\n      t(\"admin.m10\"),\r\n      t(\"admin.m11\"),\r\n      t(\"admin.m12\"),\r\n    ],\r\n    datasets: [\r\n      {\r\n        label: t(\"admin.label\"),\r\n        data: [\r\n          getRevenueFlMonth(1),\r\n          getRevenueFlMonth(2),\r\n          getRevenueFlMonth(3),\r\n          getRevenueFlMonth(4),\r\n          getRevenueFlMonth(5),\r\n          getRevenueFlMonth(6),\r\n          getRevenueFlMonth(7),\r\n          getRevenueFlMonth(8),\r\n          getRevenueFlMonth(9),\r\n          getRevenueFlMonth(10),\r\n          getRevenueFlMonth(11),\r\n          getRevenueFlMonth(12),\r\n        ],\r\n        borderColor: [\"rgba(54,162,86,0.5)\"],\r\n        backgroundColor: [\"rgba(54,162,86,0.5)\"],\r\n        pointBackgroundColor: [\"rgba(54,162,86,0.5)\"],\r\n        pointBorderColor: [\"rgba(54,162,86,0.5)\"],\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    legend: {\r\n      display: true,\r\n    },\r\n    cornerRadius: 20,\r\n    scales: {\r\n      area: [\r\n        {\r\n          ticks: {\r\n            callback: (e) => formCurencyVN(e),\r\n          },\r\n        },\r\n      ],\r\n      yAxes: [\r\n        {\r\n          ticks: {\r\n            callback: (e) => formCurencyVN(e),\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchProducts = async () => {\r\n      await callApi(`order`, \"get\", null).then((res) => {\r\n        if (res && res.status === 200 && res.data) {\r\n          const product = [...res.data];\r\n          const arr = [];\r\n          product.forEach((item) =>\r\n            item.data.forEach(async (ele) => await arr.push(ele))\r\n          );\r\n          setProducts([...arr]);\r\n        } else {\r\n          setProducts([]);\r\n        }\r\n      });\r\n    };\r\n\r\n    fetchProducts();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Line data={dataChart} options={options} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LineChart;\r\n"],"sourceRoot":""}